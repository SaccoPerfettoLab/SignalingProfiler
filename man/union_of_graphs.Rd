% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multi_carnival.R
\name{union_of_graphs}
\alias{union_of_graphs}
\title{Merge Two CARNIVAL Graphs into a Unified Network}
\usage{
union_of_graphs(
  graph_1,
  graph_2,
  proteins_df,
  files,
  path_sif = "./union_graph.sif",
  path_rds = "./union_graph.rds"
)
}
\arguments{
\item{graph_1}{An `igraph` object from `run_carnival_and_create_graph()`, representing the first network.}

\item{graph_2}{An `igraph` object from `run_carnival_and_create_graph()`, representing the second network.}

\item{proteins_df}{A tibble containing inferred proteins from the naive network.}

\item{files}{Logical, if `TRUE`, saves the resulting network as a `.sif` file and an `.rds` object.}

\item{path_sif}{Character, the file path for saving the network in `.sif` format. Default is `'./union_graph.sif'`.}

\item{path_rds}{Character, the file path for saving the network as an `.rds` object. Default is `'./union_graph.rds'`.}
}
\value{
*SP_object*, a list  containing:
\itemize{
  \item `igraph_network` - The merged `igraph` network.
  \item `nodes_df` - A tibble with node attributes.
  \item `edges_df` - A tibble with edge attributes.
}
}
\description{
This function takes two CARNIVAL-generated graphs, merges their nodes and edges,
and computes the union of the networks while resolving duplicate nodes and edges.
}
\examples{
# Example CARNIVAL outputs (simplified)
graph_1 <- toy_opt_network$igraph_network
graph_2 <-  toy_opt_network$igraph_network

proteins_df <- tibble::tibble(
  gene_name = c("A", "B", "C", "D", "E", "F", "G"),
  UNIPROT = c("P12345", "P67890", "Q12345", "Q67890", "R12345", "R67890", "S12345"),
  mf = c("tf", "kin", "tf", "kin", "tf", "kin", "tf"),
  final_score = c(1.1, -0.4, 0.9, -0.6, 0.8, -1.0, 0.3),
  method = c("CARNIVAL", "CARNIVAL", "CARNIVAL", "CARNIVAL", "CARNIVAL", "CARNIVAL", "CARNIVAL")
)

# Merge graphs
merged_network <- union_of_graphs(graph_1, graph_2, proteins_df, files = FALSE)
}
