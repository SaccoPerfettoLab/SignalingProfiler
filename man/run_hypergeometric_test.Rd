% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/footprint_prediction.R
\name{run_hypergeometric_test}
\alias{run_hypergeometric_test}
\title{Run Hypergeometric Test for VIPER Correction}
\usage{
run_hypergeometric_test(
  omic_data,
  viper_output,
  analysis,
  organism,
  integrated_regulons = FALSE,
  collectri = FALSE,
  custom = FALSE,
  custom_path = NULL
)
}
\arguments{
\item{omic_data}{A dataframe containing the experimental omics dataset.}

\item{viper_output}{A dataframe containing the VIPER-enriched proteins.}

\item{analysis}{String, specifying the type of analysis (`"tfea"` or `"ksea"`).}

\item{organism}{Character string, either `"human"` or `"mouse"`, specifying the organism.}

\item{integrated_regulons}{Logical, indicating whether to use regulons
derived from experimental data (Ser/Thr and Tyr Kinome Atlas (PMIDs: 36631611, 38720073)). Default: `FALSE`.}

\item{collectri}{Logical, indicating whether to use CollecTRI regulons
(only applicable to  `"tfea" `). Default: `FALSE`.}

\item{custom}{Logical indicating whether to use a custom regulon dataset. Default: `FALSE`.}

\item{custom_path}{String specifying the file path to a custom regulon dataset (if `custom = TRUE`). Default: `NULL`.
'}
}
\value{
A dataframe containing the VIPER correction weights
based on the hypergeometric test.
}
\description{
This function corrects VIPER output using a hypergeometric test to weight
VIPER inferred protein activities  according to the number of
significantly modulated analytes (transcripts or phosphosites) in the regulon.
}
\examples{
data('tr_toy_df')
viper_format <- create_viper_format(omic_data = tr_toy_df, analysis = 'tfea', significance = FALSE)
viper_output <- run_viper(viper_format = viper_format,
                     analysis = "tfea",
                     organism = "human",
                     reg_minsize = 10,
                     integrated_regulons = FALSE)
ea_output <- run_hypergeometric_test(omic_data = tr_toy_df,
                                     viper_output = viper_output$sign,
                                     analysis = "tfea",
                                     organism = "human")

}
